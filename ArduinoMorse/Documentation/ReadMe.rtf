{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh14220\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\fs24 \cf0 \
//INTRODUCTION//\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
This software has been designed for the Engduino (a variation of the Arduino created at UCL). With minimal code changes, it could be implemented for any Arduino device.\
\
This software was thought of from the realisation that the Engduino button was facing down when connected by USB to a computer. This led me to think that the button could have more user experience power than I initially thought: the button could be used by pressing on any point of the Engduino\'92s surface and not only on the button itself, since the button would press itself against the table or working stand you have your computer resting on.\
\
I also tried to make use of more of the Engduino\'92s capabilities, by utilising the thermistor to activate functions in the program. This was decided because the user experience framework I thought of was one of simple touching and pressing actions with one or two fingers. The thermistor allows a function to not be activated until the user rests his/her finger on the sensor, elevating the perceived temperature and initialising the function.\
\
The light sensor was tested and theoretically it was predicted to work similarly to the thermistor for the aforementioned applications. However, when used in practice, I realised that when you are pressing the Endguino to write letters, you can sometimes cover almost completely the light sensor, unexpectedly triggering the function it was linked to. This is a lot less likely to happen with the thermistor.\
\
Motion detection was also a contender for being implemented as a trigger of certain functions. Nonetheless, the way the user interacts with the Engduino (normally resting your hand over the Engduino and moving it to use the button and thermistor) means that there would be too many motions detected and it would be extremely hard to differentiate which ones would trigger a response and which ones would not.\
\
Pressing keyboard keys in your laptop was something I wanted to avoid as much as possible, because it takes the user out of the morse experience and out of the Engduino experience. This software could have been written without making use of the keyboard in your computer, but there were two cases when I thought that making use of it was beneficial:\
    - The first of them is when writing a space between words. In international morse code a space between words is a silence about twice as long as a space between letters. When designing the first versions of this software, the spaces were implemented this way. However, I found that for the first-time morse user (such as me), this meant struggling to write fast enough so you didn\'92t write extra spaces (more in this issue is described in the Instructions-General Use section). I then tried to make the thermistor the way to write spaces, still using the Engduino, but it subtracted value from the user experience (more in this issue is described in the Instructions-Spaces section). This is why I implemented spaces using the space bar, improving the ease and speed of writing but taking you away for an instant from the Engduino environment, which I think is a fair trade off.\
    - The second of them is the use of the \'910\'92 key to use the reset function. The \'910\'92 key is not intended to be used as the main way to trigger the reset function, but as an auxiliary method if the thermistor is not working correctly due to low temperature environments or any other reason. In this case, the keyboard is not used as the main approach to interact with the software, but as a way to still be able to use it if other methods are not working properly.\
\
The processing program is set to a screen with a predetermined size. This is done because the manual re-sizing option deleted the characters already written when the user tried to re-size the screen, and the fullscreen option meant that many shapes used in the style of the program would be misplaced in screens bigger or smaller than the one of the computer in which the program was designed on. The size of the program window is small enough to fit in most of the screen sizes, but also big enough to provide a good user experience. The program was successfully tested in a 13\'92 Retina MacBook Pro.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 //INSTRUCTIONS//\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 //SET-UP//\
\
  1. Extract the zip folder.\
  2. Open the folder, go into the \'93Engduino\'94 folder and then into the \'93EngduinoSourceCode\'94 folder. Open the \'93EngduinoSourceCode.ino\'94 file (this should open the Arduino IDE, which you should have installed). I have found that sometimes you need to already have the Arduino IDE running before you open the file, or otherwise it will open a blank file.\
  3. Upload the code to your Engduino.\
    3.1 If the compilation fails, you probably need to change the port used in the code to the port your Engduino is using in your computer. To do this go to Tools -> Port and select the correct port. You will also need to change the \'912\'92 in the line 27 of the Processing source code to the number of the place your port appears in the list of serial ports (the first port is a \'910\'92).\
  4. Go into the \'93Engduino\'94 folder again and open the \'93ProcessingSourceCode\'94 folder. Open the \'93ProcessingSourceCode.pde\'94 file to review the source code of the processing program and to run it.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 //GENERAL USE//\
\
The Morse Code Engduino software you are using is based in the button this device has. You can use this software by simply pressing it, or you can place your Engduino as advised in the example photos (located in the same folder as this file you are reading) to enjoy the intended user experience.\
\
By pressing the button briefly, you will write a dot, and by pressing it a little bit longer (specifically more than 171 milliseconds) you will write a dash. To make a space between letters of the same word, you just have to wait more than 400 milliseconds without pressing the button (about half a second).\
If you are an expert morse typer, you will find these time parameters quite unusual. This software was made with non-expert users in mind, such as me. I found hard to get used to type fast morse code, and so I made many mistakes using the internationally accepted parameters, writing many unwanted spaces between letters, spaces between words, etc. I find these settings pleasing to the experience of a new morse user, giving him/her time to think and search the translation of the next letter they want to use. It takes time to get the results you want using morse, so please have patience and keep an open mind. If you want to know more about morse and the internationally recognised parameters, visit: {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Morse_code"}}{\fldrslt https://en.wikipedia.org/wiki/Morse_code}}.\
\
You do not have to worry about having running out of space. When exceeding the space left to write horizontally, the program will automatically jump to a new line. When exceeding the vertical space available, the program will automatically clear the screen and jump to the first line, where you started.\
\
All instructions (writing letter, making spaces between words, resetting your work, etc.) will take one more \'93step\'94 to appear on the screen, which can be confusing at first. You, the user, will get used to this after writing a few lines of morse using the Engduino.\
\
//SPACES//\
\
If you wish to end a word (add a space), please press the \'91space\'92 key in your keyboard after you finish writing the last letter intended before the space. \
The writing of spaces was tested with the universal use in morse code (being a seven units silence, taking a dot as a unit) but I found it too difficult for beginners to write long pieces of code without writing unwanted spaces.  This software is intended for leisure use of morse code, so I prioritised the ease of use before the universal nature of the implementation.\
The writing of spaces was also tested using the temperature sensor (just as it works for the reset function in the final version) but the constant use of spaces meant an unpleasant user experience, while the constant use of the reset function is less likely to take place.\
\
IMPORTANT: If you write an sequence of dots and/or dashes which does not match any letter, nothing will be written. In the case of having just reseted, a space will be written (you can avoid this by not writing random sequence of dashes/dots and not repeating letters more than twice). \
\
//RESET//\
\
The reset function is intended to be used with the temperature sensor. To do this, rest your finger on the temperature sensor while you press the button, making the first dot/dash of the next letter you want to write (these two actions do not need to take place at the same time, but it is important that your finger is already resting in the thermistor when you press the button).\
You can also reset the program by pressing the \'910\'92 key in your keyboard. This was implemented as an auxiliary method if the thermistor does not work properly because of environmental conditions, the user wearing gloves, cold hands, etc.\
The reset function does not happen instantly on the screen. When you start writing a new letter, the reset will take place.\
Please do not touch the temperature sensor if you do not wish to make use of the reset function.\
If you reset too many times you will run out of screen space quickly; this should not worry the user, since once you exceed the size of the window, the previous text written is erased and the user is able to start writing again at the top of the screen.\
\
IMPORTANT: When you are writing your first letter after you have reseted using the \'910\'92 key, you have to add a dot at the beginning of the letter. I.e: the letter \'92S\'92 would be \'91. . . .\'92 instead of \'91. . .\'92; the letter \'91G\'92 would be \'91. - . - .\'92 instead of \'91- . - .\'92\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 //POSSIBLE PROBLEMS AND SOLUTIONS//\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
 - The button of the Engduino will sometimes get stuck (making a dash instead of a dot even if the latter was the desired input). As far as I know, this is a hardware problem and I have found no way around it. It may happen with some Engduinos and not with others. If it happens, which you can clearly tell by the blue LEDs not turning off, you will have to reset the program or ignore the error.\
\
 - If all letters are printed in new lines, go to the Arduino IDE, click on the top right corner to access the serial monitor, and set it to \'91No line ending\'92 and \'919600 baud\'92 (it should be like this by default) on the bottom right corner, then run the processing program again.\
\
 - If the physical space between the usb port of your computer and the table you have your computer on is too small, the Engduino button could be permanently pressed. This could happen to very thin laptops, such as MacBooks, MacBook Airs and HP Spectres. If this happens, you will need to use a USB A-Male to A-Female extension cable. You could also place the laptop so the Engduino does not touch any surface (such as at the edge of a table), and then use the Endguino button by simply reaching it with your finger on the bottom side of the device.\
\
 - If the Engduino is used in temperatures above 30 degrees (which is not likely to happen in the UK) or the thermistor is not working correctly, it may happen that the program resets every time you try to write a letter. In this unlikely event, please go to line 85 in the Engduino code and change the temperature from \'9230\'92 to a much higher value and use the \'910\'92 key to make use of the reset function.\
\
 - If your hand or the environment is too cold, try rubbing the thermistor or your finger to elevate the temperature sensed by the Engduino. If this does not work, use the reset function by pressing the \'910\'92 key.\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 //STAND//\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 The stand for the Engduino has been designed with Morse Code as the main theme, with two \'91M\'92 letters containing the USB socket where the Engduino will be placed. It also contains a security hole to allow for a cable to be put through it, so it can be safely displayed in public.\
\
}